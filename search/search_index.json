{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"fastapi-endpoints <p>Effortless routing, simplified</p> <p>fastapi-endpoints is a lightweight and simple file-based router for FastAPI framework.</p> <p>The key features are:</p> <ul> <li>Simple: Organize and define routes directly through a clear and simple file structure.</li> <li>Auto Discovery: Automatically detects and registers all defined routers, reducing manual setup.</li> <li>Effortless Integration: Seamlessly integrates with existing FastAPI projects, with minimal configuration required.</li> <li>Selective Routing: Include or exclude specific routers by specifying Python modules, giving full control over active routes.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>fastapi-endpoints behaves as a plugin for:</p> <ul> <li>FastAPI Framework</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Create and activate a virtual environment. Some options are:</p> <ul> <li>venv</li> <li>pyenv, which has a modern approach</li> </ul>"},{"location":"#using-pip","title":"Using <code>pip</code>","text":"<pre><code>pip install fastapi-endpoints\n</code></pre>"},{"location":"#using-poetry","title":"Using <code>poetry</code>","text":"<pre><code>poetry add fastapi-endpoints\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#basic-usage","title":"Basic usage","text":"<p>The project structure should contain the directory <code>routers/</code>, for example this:</p> <pre><code>routers\n|\u2500\u2500 __init__.py\n\u251c\u2500\u2500 api_v1\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2514\u2500\u2500 posts.py\n\u2514\u2500\u2500 dev\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 probes.py\napp.py\n</code></pre> <p>The <code>app.py</code> should contain the following code:</p> app.py<pre><code>from fastapi import FastAPI\nfrom fastapi_endpoints import auto_include_routers\n\nfrom . import routers\n\napp = FastAPI()\n\nauto_include_routers(app, routers)\n</code></pre> <p>And for the routers, define it as this:</p> routers/api_v1/users.py<pre><code>from fastapi import APIRouter\n\nusers_router = APIRouter()\n\n@users_router.get(\"/\")\nasync def get_users():\n    ...\n</code></pre> <p>For the example above, the <code>get_users</code> endpoint will be located at path <code>http://localhost/api/v1/users/</code>.</p> <p>All the other routes will be automatically disovered, and they will be included with a prefix following the file structure.</p>"},{"location":"#exclude-routers","title":"Exclude routers","text":"<p>In this example, the <code>routers/dev/posts.py</code> router will be excluded.</p> <pre><code>routers\n|\u2500\u2500 __init__.py\n\u251c\u2500\u2500 api_v1\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 users.py\n\u2502   \u2514\u2500\u2500 posts.py\n\u2514\u2500\u2500 dev\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 posts.py\napp.py\n</code></pre> <p>Excluding routers is entirely done by specifying which module to exclude in the <code>__init__.py</code> file.</p> <p>In <code>routers/dev/__init__.py</code>, import the <code>posts</code> module and add it to <code>EXCLUDED_ROUTERS</code> constant which is used for excluding scanning for routers:</p> routers/dev/__init__.py<pre><code>from . import posts\n\nEXCLUDED_ROUTERS = [posts]\n</code></pre> <p>The entire <code>routers/dev</code> module can be excluded by importing <code>dev</code> in the <code>routers/__init__.py</code></p> routers/__init__.py<pre><code>from . import dev\n\nEXCLUDED_ROUTERS = [dev]\n</code></pre>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the terms of the MIT license.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to FastAPI-Endpoints","text":"<p>I am very eager to see what you can contribute to FastAPI-Endpoints! All contributors are welcomed here. Below is a guide to help you get started.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to Contribute","text":""},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you've found a bug, please open an issue and provide as much detail as possible:</p> <ul> <li>A clear and descriptive title.</li> <li>Steps to reproduce the bug.</li> <li>Expected and actual behavior.</li> <li>Any error messages or logs.</li> <li>Add the <code>bug</code> tag.</li> <li>Assign the issue to a maintainer.</li> </ul>"},{"location":"CONTRIBUTING/#suggesting-features","title":"Suggesting Features","text":"<p>We appreciate feature suggestions! Please open an issue with the following:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed explanation of the feature.</li> <li>Potential use cases or examples.</li> <li>Any relevant screenshots or mockups.</li> <li>Add the <code>feature-request</code> tag.</li> <li>Assign the issue to a maintainer.</li> </ul>"},{"location":"CONTRIBUTING/#submitting-code-changes","title":"Submitting Code Changes","text":"<p>If you want to contribute code:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch (<code>git checkout -b feature/my-new-feature</code>). It is very important to use the <code>feature/</code> prefix to the branch.</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>).</li> <li>Push to the branch (<code>git push origin feature/my-new-feature</code>).</li> <li>Open a pull request and provide details about What, Why, How things got changed.</li> </ol>"},{"location":"CONTRIBUTING/#development-setup","title":"Development Setup","text":"<p>Here\u2019s how to set up the project on your local machine. The project is heavily using Poetry so its expected to have that installed. Create a new environment using either venv or pyenv for all the supported python versions of <code>fastapi-endpoints</code>.</p> <ol> <li>Clone the repository: <code>git clone https://github.com/yourusername/yourprojectname.git</code></li> <li>Navigate to the project directory: <code>cd yourprojectname</code></li> <li>Install dependencies: <code>poetry install</code></li> <li>Make changes to the project.</li> <li>Check formatting using <code>ruff format --check</code> if there are any issues resolve them with <code>ruff format</code></li> <li>Check lint using <code>ruff check</code> if there are any issues resolve them in the code.</li> <li>Run the tests <code>pytest</code></li> </ol>"},{"location":"CONTRIBUTING/#style-guide","title":"Style Guide","text":"<ul> <li>Imports:</li> <li>Place all imports at the top of the file, just after any module comments and docstrings.</li> <li>Use absolute imports whenever possible.</li> <li>Group imports into three sections, in this order: standard library imports, third-party imports, and local application/library-specific imports. Each group should be separated by a blank line.</li> <li>Example:     <pre><code>import os\nimport sys\n\nimport requests\n\nfrom my_project import my_module\n</code></pre></li> <li>Docstrings:</li> <li>Use docstrings to describe modules, classes, and functions.</li> <li> <p>Follow the PEP 257 conventions for docstrings.</p> </li> <li> <p>Type Annotations:</p> </li> <li>Use type annotations to specify the expected data types of function arguments and return values.</li> <li>Example:     <pre><code>def add(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>Use meaningful commit messages to describe the changes you have made. Follow this format:</p>"},{"location":"auto-discovery/","title":"Auto Discovery","text":"<p>The auto discovery feature works by calling the <code>auto_include_routers</code> function within the project, with the FastAPI application and the routers module as paramters.</p> <p>Note</p> <p>It is mandatory, for now, to have a directory called <code>routers</code> where all the endpoints are defined and instanciated with an <code>fastapi.APIRouter</code> object.i</p>"},{"location":"auto-discovery/#file-based-routing","title":"File-based routing","text":"<p>When a project is launched with <code>auto_include_routers</code> called, fastapi-endpoints walks through each module under the <code>routers</code> module of the app.</p> <p>Python modules found with an <code>APIRouter</code> instance will be registered in the application.</p> <p>Keep routers directory clean</p> <p>There should not be any python module (beside <code>__init__.py</code>) without an instance of a router. The app will raise an error if the case is applicable.</p>"},{"location":"auto-discovery/#prefix-format","title":"Prefix format","text":"<p>The prefix for an endpoint is created from the path where the file :w</p>"},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#new-project","title":"New Project","text":"<p>First, be sure you have a python environment created and activated.</p> <p>Create a project with the following structure: <pre><code>routers\n|\u2500\u2500 items.py\n\u2514\u2500\u2500 __init__.py\napp.py\n__init__.py\n</code></pre></p> <p>In the <code>app.py</code> file, add the following code:</p> <pre><code>from fastapi import FastAPI\nfrom fastapi_endpoints import auto_include_routers\n\nfrom . import routers\n\napp = FastAPI()\n\nauto_include_routers(app, routers)\n</code></pre> <p>In the <code>routers/items.py</code> file, add the following code:</p> <pre><code>from fastapi import APIRouter\n\nitems_router = APIRouter()\n\n@items_router.get(\"/\")\ndef get_items():\n    return {\"item1\": \"my-item\"}\n\n\n@items_router.get(\"/{item_id}/\")\ndef get_item(item_id: int):\n    return {\"item1\": \"my-item\", \"id\": item_id}\n</code></pre> <p>Start the FastAPI webserver using <code>uvicorn</code></p> <p>The items endpoints should now appear if you go to </p> <p>http://localhost:8000/docs</p>"},{"location":"quick-start/#existing-project","title":"Existing Project","text":"<p>An example of an existing project structure:</p> <pre><code>routers\n|\u2500\u2500 items.py\n\u2514\u2500\u2500 __init__.py\napp.py\n__init__.py\n</code></pre> app.py<pre><code>from fastapi import FastAPI\n\nfrom .routers import items\n\napp = FastAPI()\n\napp.include_router(items.router, prefix=\"/api/v1/items\")\n</code></pre> routers/items.py<pre><code>from fastapi import APIRouter\n\nitems_router = APIRouter()\n\n@items_router.get(\"/\")\ndef get_items():\n    return {\"item1\": \"my-item\"}\n\n\n@items_router.get(\"/{item_id}/\")\ndef get_item(item_id: int):\n    return {\"item1\": \"my-item\", \"id\": item_id}\n</code></pre> <p>First, import <code>auto_include_routers</code> in <code>app.py</code> and give the <code>routers</code> module and <code>app</code> as parameters. </p> <p>Then, remove the <code>app.include_router</code> from the file.</p> app.py<pre><code>from fastapi import FastAPI\nfrom fastapi_endpoints import auto_include_routers\n\nfrom . import routers\n\napp = FastAPI()\nauto_include_routers(app, routers)\n</code></pre> <p>To keep the same prefix as specified in the <code>app.include_router</code>, move <code>items.py</code> to <code>routers/api_v1/items.py</code>.</p> <p>The project structure should look like this now:</p> <pre><code>routers\n|\u2500\u2500 api_v1\n|   |\u2500\u2500 items.py\n|   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __init__.py\napp.py\n__init__.py\n</code></pre> <p>Now, the same behaviour is kept and now creating new routers is just adding files to the <code>api_v1</code> directory.</p>"},{"location":"quick-start/#adding-a-new-router","title":"Adding a new router","text":"<p>A new router can be added to the FastAPI app as simple as creating a new file. Actually, this is how you add  a new router to an existing project.</p> <p>For example, having a project structure like this: </p> <pre><code>routers\n|\u2500\u2500 api_v1\n|   |\u2500\u2500 items.py\n|   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __init__.py\napp.py\n__init__.py\n</code></pre> <p>Create a new file, like <code>new_router.py</code> and add it anywhere within the <code>routers</code> project. First, let's try adding it under <code>routers/api_v1</code>.</p> <pre><code>routers \n|\u2500\u2500 api_v1\n|   |\u2500\u2500 new_router.py\n|   |\u2500\u2500 items.py\n|   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __init__.py\napp.py\n__init__.py\n</code></pre> <p>Create a new <code>APIRouter</code> instance, and add your routes:</p> routers/api_v1/new_router.py<pre><code>from fastapi import APIRouter\n\nrouter = APIRouter()\n\n# Add routes here\n# ...\n</code></pre> <p>Start the project normally, and now observe that the new endpoints routes have paths <code>/api/v1/new_router/</code>.</p>"}]}